/* Generated by AN DISI Unibo */ 
package it.unibo.workshiftmanager

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Workshiftmanager ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "start"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("start") { //this:State
					action { //it:State
						discardMessages = false
					}
					 transition(edgeName="t00",targetState="morning",cond=whenEvent("switch"))
				}	 
				state("morning") { //this:State
					action { //it:State
						println("Mattino: gestisco messaggi di tipo m1")
					}
					 transition(edgeName="t01",targetState="afternoon",cond=whenEvent("switch"))
					transition(edgeName="t02",targetState="handleM1",cond=whenDispatch("m1"))
				}	 
				state("handleM1") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("m1(V)"), Term.createTerm("m1(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Mattino: il messaggio m1 ricevuto è:${payloadArg(0)}")
								delay(1000) 
						}
					}
					 transition( edgeName="goto",targetState="morning", cond=doswitch() )
				}	 
				state("afternoon") { //this:State
					action { //it:State
						println("Pomeriggio: gestisco messaggi di tipo m2")
					}
					 transition(edgeName="t13",targetState="night",cond=whenEvent("switch"))
					transition(edgeName="t14",targetState="handleM2",cond=whenDispatch("m2"))
				}	 
				state("handleM2") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("m2(V)"), Term.createTerm("m2(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Pomerggio: il messaggio m2 ricevuto è:${payloadArg(0)}")
								delay(1000) 
						}
					}
					 transition( edgeName="goto",targetState="afternoon", cond=doswitch() )
				}	 
				state("night") { //this:State
					action { //it:State
						println("Notte: non gestisco alcun tipo di messaggio ma accodo le richieste per rispondere in futuro")
					}
					 transition(edgeName="t25",targetState="morning",cond=whenEvent("switch"))
				}	 
			}
		}
}
