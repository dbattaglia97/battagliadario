/* Generated by AN DISI Unibo */ 
package it.unibo.parkingservicegui2

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkingservicegui2 ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var SLOTNUM = -1
				var TOKENID = -1
				
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("	parkingservicegui2 (client mock)  STARTS")
					}
					 transition( edgeName="goto",targetState="requestToEnter", cond=doswitch() )
				}	 
				state("requestToEnter") { //this:State
					action { //it:State
						println("	client2 requestToenter ")
						request("reqenter", "reqenter(client)" ,"parkingmanagerservice" )  
					}
					 transition(edgeName="t05",targetState="enterthecar",cond=whenReply("enter"))
				}	 
				state("enterthecar") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("enter(SLOTNUM)"), Term.createTerm("enter(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 SLOTNUM = payloadArg(0 ).toInt()  
								println("	client2 receives SLOTNUM = $SLOTNUM ")
						}
					}
					 transition( edgeName="goto",targetState="movethecartoindoor", cond=doswitch() )
				}	 
				state("movethecartoindoor") { //this:State
					action { //it:State
						println("	client2 moving the car in the INDOOR and press CARENTER ")
						request("carenter", "carenter($SLOTNUM)" ,"parkingmanagerservice" )  
					}
					 transition(edgeName="t06",targetState="afterreceipt",cond=whenReply("receipt"))
				}	 
				state("afterreceipt") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("receipt(TOKENID)"), Term.createTerm("receipt(TOKENID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 TOKENID = payloadArg(0).toInt() 
								println("	client2 receives TOKENID = $TOKENID ")
						}
						println("$name in ${currentState.stateName} | $currentMsg")
						stateTimer = TimerActor("timer_afterreceipt", 
							scope, context!!, "local_tout_parkingservicegui2_afterreceipt", 10000.toLong() )
					}
					 transition(edgeName="t07",targetState="reqpickup",cond=whenTimeout("local_tout_parkingservicegui2_afterreceipt"))   
				}	 
				state("reqpickup") { //this:State
					action { //it:State
						println("	client2 wants to pickup TOKENID = $TOKENID ")
						request("pickup", "pickup($TOKENID)" ,"parkingmanagerservice" )  
					}
					 transition(edgeName="t08",targetState="waitForCarOutDoorArrival",cond=whenReply("pickupAccepted"))
				}	 
				state("waitForCarOutDoorArrival") { //this:State
					action { //it:State
					}
					 transition(edgeName="t09",targetState="pickup",cond=whenEvent("caroutdoorarrival"))
				}	 
				state("pickup") { //this:State
					action { //it:State
						println("	client2 pickup TOKENID = $TOKENID ")
						delay(2000) 
						emit("carwithdrawn", "cw(bye)" ) 
					}
				}	 
			}
		}
}
